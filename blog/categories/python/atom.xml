<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 30歳前半から始めるモダンなエンジニアへの転身の足跡]]></title>
  <link href="http://tsuetsugu.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://tsuetsugu.github.io/"/>
  <updated>2015-06-22T22:48:30+09:00</updated>
  <id>http://tsuetsugu.github.io/</id>
  <author>
    <name><![CDATA[Toshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[twitterのBotをPythonで作ってみる]]></title>
    <link href="http://tsuetsugu.github.io/blog/2015/05/17/make-twitter-bot/"/>
    <updated>2015-05-17T15:51:00+09:00</updated>
    <id>http://tsuetsugu.github.io/blog/2015/05/17/make-twitter-bot</id>
    <content type="html"><![CDATA[<p>週末に定期的に参加している勉強会<a href="http://projectsamurai.web.fc2.com/jikaiyokoku.htm">MPS</a>で開催場所の連絡を自動化する一環で</p>

<p>何か面白いメッセージを通知して送れるといいねという話になったので、</p>

<p>何か面白そうと思いその開発を行うことになりました。</p>

<p>いずれは機械学習とかで気の利いた一言とかできたらいいなぁとかいうのもありますが、</p>

<p>先ずはベイビーステップとして、Hello worldをつぶやくのをNode.jsとPythonで作ってみようと思います。</p>

<p>最初は一先ずPython3で。</p>

<h3>環境とか設定は以下を参考にさせて頂きました。</h3>

<p><a href="http://qiita.com/kaki_k/items/e824cfcf089e75d43551">Python Django入門 (2) Mac編</a></p>

<p><a href="http://webnaut.jp/develop/633.html">やってみると意外とカンタン！TwitterAPIを使ってつぶやきデータを取得してみた。</a></p>

<p><a href="https://apps.twitter.com/">Twitter API登録</a></p>

<p>色々設定がめんどいですが、参考サイト通りにやればいけました・・・。</p>

<p>つぶやくだけならば、APIでのwebsiteやCallbackとかは適当で大丈夫でした。</p>

<h3>開発用の仮想環境作成と起動</h3>

<pre><code>virtualenv -p python3 tweet
source tweet/bin/activate
</code></pre>

<h3>仮想環境でつぶやくために必要なライブラリインストール</h3>

<pre><code>pip install requests
pip install requests-oauthlib
</code></pre>

<h3>コードは下記の通り</h3>

<p>tweet.py
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from requests_oauthlib import OAuth1Session&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;CK = ‘XXXXX’ # Consumer Key
</span><span class='line'>CS = ‘XXXXX’ # Consumer Secret
</span><span class='line'>AT = ‘XXXXX’  # Access Token
</span><span class='line'>AS = ‘XXXXX’ # Accesss Token Secert&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;URL = &ldquo;&lt;a href="https://api.twitter.com/1.1/statuses/update.json"&gt;https://api.twitter.com/1.1/statuses/update.json&lt;/a&gt;&rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;def tweet(text):
</span><span class='line'>    params = {&ldquo;status&rdquo;: text}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;twitter = OAuth1Session(CK, CS, AT, AS)
</span><span class='line'>req = twitter.post(URL, params = params)
</span><span class='line'>
</span><span class='line'>return req.status_code
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == &lsquo;&lt;strong&gt;main&lt;/strong&gt;&rsquo;:
</span><span class='line'>    print(tweet(&ldquo;Hello World!!!!”))</span></code></pre></td></tr></table></div></figure></p>

<p>Python2の場合は、print関数の書き方が異なるので、そこをいじればPython2でも動きます。</p>

<h3>実行</h3>

<pre><code>python tweet.py
</code></pre>

<p>画面は出てませんが、tweetしてくれました。</p>

<p>手動実行の最初の段階なので、大したことはないですが・・・。</p>

<p>今後はHerokuなどで定期的につぶやいたり、つぶやく内容を改良していきたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[３月に参加したPython勉強会について]]></title>
    <link href="http://tsuetsugu.github.io/blog/2015/03/21/learn-oauth/"/>
    <updated>2015-03-21T19:48:20+09:00</updated>
    <id>http://tsuetsugu.github.io/blog/2015/03/21/learn-oauth</id>
    <content type="html"><![CDATA[<p>今回参加した勉強会のテーマはPython OAuthを使ってみよう！です。</p>

<p>OAuthの仕組みを知りながら認証機能の実装方法を学ぶ内容でした。</p>

<p>実装言語はPythonになり、Virtualenv、Django、herokuを使用します。</p>

<hr />

<h3>OAuthとは</h3>

<p>OAuth承認のフレームワークです。</p>

<p>なんだそれ？という感じですがこのフレームワークを使用して認証してる</p>

<p>サービスは色々とありました。</p>

<p>OAuthを使っているサービスはDoorkeeperやConnpassなどでみかける</p>

<p>Facebookでログインやtwitterでログインなどのボタンで表示される下記のようなページになります。</p>

<p><img src="/images/oAuth_login.png" width="640" height="480"></p>

<p>OAuthを理解することで認証方法を利用してログインページの作成方法を理解出来るようになります。</p>

<hr />

<h2>登場人物</h2>

<ul>
<li>リソースオーナー : リソースの持ち主(自分)</li>
<li>リソースサーバー : リソースを預かっているサーバー(facebook,twwiter)</li>
<li>クライアント     : 使用したいアプリケーション側(doorkeeper,Connpass)</li>
<li>承認サーバー : 権利を承認するサーバー(facebook,twwiter)</li>
</ul>


<hr />

<h2>使用するメリット</h2>

<ul>
<li><p>リソースオーナー</p>

<ul>
<li>自分の認証用パスワードの公開が不要(ユーザ認証情報の漏洩防止)</li>
<li>同じ情報をサービス毎に入力する手間の削減</li>
</ul>
</li>
<li><p>クライアント</p>

<ul>
<li>他のサービスのリソースを容易に利用可能</li>
<li>自分のサーバーで管理する個人情報の削減</li>
<li>ユーザーエクスペリエンスの向上</li>
</ul>
</li>
<li><p>その他</p>

<ul>
<li>標準化が進んでおり、開発が容易</li>
</ul>
</li>
</ul>


<hr />

<p>仕組みさえ理解できれば、ログイン認証の選択肢としてありですね。</p>

<p>勉強会の内容は実際Pythonで作成するところまでなので、引き続き</p>

<p>別記事で環境作成から作成するまでを書いていければと思います。。。</p>
]]></content>
  </entry>
  
</feed>
