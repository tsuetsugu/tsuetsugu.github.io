<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | 30歳前半から始めるモダンなエンジニアへの転身の足跡]]></title>
  <link href="http://tsuetsugu.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://tsuetsugu.github.io/"/>
  <updated>2015-06-22T22:48:30+09:00</updated>
  <id>http://tsuetsugu.github.io/</id>
  <author>
    <name><![CDATA[Toshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Struts2でファイルアップロード後に画像を表示する方法]]></title>
    <link href="http://tsuetsugu.github.io/blog/2015/06/22/java-training-2/"/>
    <updated>2015-06-22T22:41:36+09:00</updated>
    <id>http://tsuetsugu.github.io/blog/2015/06/22/java-training-2</id>
    <content type="html"><![CDATA[<p>研修ではまったこと第二弾として、画像アップロードについてのメモ書きです。</p>

<p>自己紹介のページなどで自分の紹介画像をアップロードする場合、</p>

<p>更新ボタンを押す前にどんな画像かを一回アップロードしてその画面で確認したいものです。</p>

<p>その手順を探しても中々検索出来なかったので、自分のやった手順を紹介です。</p>

<p>Struts2では画面とActionにgetter、setterを設定することで自動的にバインドされて一時ファイルも作成されるので</p>

<p>楽チンですが、アクションが終わって画面で表示されるとアップロードの一時ファイルは消えてしまいます。</p>

<p>なので、表示後に保存したり、別の画面で使用したい場合は、</p>

<p>別のフォルダに一時ファイルを保存する必要があります。</p>

<p>ただ後述していますが、コピーしたファイルなどはログアウト時に消さないと増え続けてしまうので注意です。</p>

<h2>JSP側</h2>

<pre><code>&lt;img src="&lt;s:property value = "%{#session.uploadprofileimage.filepath}"/&gt;" width="193" height="130"/&gt;

&lt;s:form action="doUpload" method="post" enctype="multipart/form-data"&gt;
   &lt;s:file name="upload" label="File"/&gt;
   &lt;s:submit value="画像アップロード"/&gt;
&lt;/s:form&gt;  
</code></pre>

<h2>Struts.xml</h2>

<pre><code>    &lt;action name="doUpload" class="action.UploadAction"&gt; 
        &lt;result name="success"&gt;/profile.jsp&lt;/result&gt;
        &lt;result name="login"&gt;/login.jsp&lt;/result&gt;
    &lt;/action&gt; 
</code></pre>

<h2>Action側</h2>

<p>やりたいことはコンテキストパスの下にユーザ独自のフォルダを作成し</p>

<p>一時ファイルをその下にコピーしています。</p>

<p>ただ、ディレクトリを作ったりしているので、ここには記載していませんが</p>

<p>ログアウトしたらディレクトリとファイルを消すという作業は要ります・・・。</p>

<pre><code>public class UploadAction{
    private File file; 
    private String contentType;
    private String filename;

    public void setUpload(File file) {
        this.file = file;
    }

    public File getFile() {
        return file;
    }

    public void setUploadFileName(String filename) {
        this.filename = filename;
    }

    public String getFilename() {
        return filename;
    }

    public String getContentType() {
        return contentType;
    }

    public void setContentType(String contentType) {
        this.contentType = contentType;
    }

    public String execute() throws Exception {

//  セッションのユーザ情報取得      
        User user = getCurrentUser();

        String realPath = ServletActionContext.getServletContext().getRealPath("/" + user.getId()); 

        File mdir = new File(realPath);
        mdir.mkdir();

        try {

            File filePath = new File(mdir,filename);            
            FileUtils.copyFile(file,filePath);
            //セッションにパスを格納
　　　　img.setFile(filePath);

            // エラーがあった場合は、スタックトレースを出力
        } catch (Exception e) {
            e.printStackTrace();

        }
        return "success";
    }
}
</code></pre>

<p>今回の手順は一時ファイルをコピーしたり、ログアウト時に消したりとするので結構めんどいです。</p>

<p>最終日に別の方法(BASE64)も試すことができなので、別途紹介したいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSPのformに複数アクションを設定したい場合の対処法]]></title>
    <link href="http://tsuetsugu.github.io/blog/2015/06/08/java-training/"/>
    <updated>2015-06-08T21:52:53+09:00</updated>
    <id>http://tsuetsugu.github.io/blog/2015/06/08/java-training</id>
    <content type="html"><![CDATA[<p>新しい会社の研修で今更ながらjavaとstruts2を使ってブログサイトを作ったので</p>

<p>そこで詰まったことを備忘録もかねて、自分が対処した方法を記載。</p>

<p>今回はJSPのformに複数アクションを設定したい場合の対処方法。</p>

<p>方法とか対処は多分いくらでもあると思いますが、</p>

<p>今回のは検索しても意外とみつからなかったので。。。</p>

<p>例えばフォームに入力された値を使いボタンによって</p>

<p>飛ばすアクションを変えたい場合、フォームのアクションは一つしか設定出来ないので</p>

<p>下記のような書き方では出来ません・・・。</p>

<pre><code>&lt;s:form id=“loginId” action=“XXXX"&gt;
    &lt;s:label value="ログインID："/&gt;
    &lt;s:textfield cssClass="loginid" name="loginid" value="" id="loginid”/&gt;
    &lt;s:label value="パスワード："/&gt;
    &lt;s:password cssClass="password" name="password" value="" id="password”/&gt;
    &lt;s:submit value=“ログイン”/&gt;
    &lt;s:submit value="新規登録"/&gt;    
&lt;/s:form&gt;
</code></pre>

<p>じゃあ、どうするかというと、javascriptで飛ばすアクションを制御します。</p>

<p>javascriptは外に出すとかはおいておいて・・・、下記のような記述になります。</p>

<p>&#8220;`</p>

<script>
function doLogin() {
    var form = document.getElementById('loginId’);
    form.action = "login”;
    form.submit();
}

function addUser() {
    var form = document.getElementById('loginId');
    form.action = "addUser”;
    form.submit();
}
</script>


<p>&lt;s:form id=“loginId”>
    &lt;s:label value=&ldquo;ログインID：&rdquo;/>
    &lt;s:textfield cssClass=&ldquo;loginid&rdquo; name=&ldquo;loginid&rdquo; value=&ldquo;&rdquo; id=&ldquo;loginid”/>
    &lt;s:label value=&#8221;パスワード：&rdquo;/>
    &lt;s:password cssClass=&ldquo;password&rdquo; name=&ldquo;password&rdquo; value=&ldquo;&rdquo; id=&ldquo;password”/>
&lt;/s:form></p>

<p><input type="submit" value="ログイン" onClick="doLogin()"/>
<input type="submit" value="新規登録" onClick="addUser()"/>
&#8220;`</p>

<p>あとはstruts.xmlかアクションクラスのアノテーションで制御をすれば遷移ができます。</p>

<p>アノテーションの場合は、下記の記載になります。</p>

<pre><code>@Action("/login”)
public String login(){
}

@Action("/addUser”)
public String addUser(){
}
</code></pre>

<p>たぶんこんなことしなくても、もっと仕様の視点から回避する方法もあると思いますし</p>

<p>やり方はもっとスマートにする方法もあると思いますが、参考までに・・・。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intellij IDEAをインストールしてみた]]></title>
    <link href="http://tsuetsugu.github.io/blog/2015/02/23/install-intellij-idea/"/>
    <updated>2015-02-23T22:42:51+09:00</updated>
    <id>http://tsuetsugu.github.io/blog/2015/02/23/install-intellij-idea</id>
    <content type="html"><![CDATA[<h2>IntelliJ IDEAのインストール</h2>

<p>次の仕事でjavaを使うことになりそうなので、IDE（統合開発環境）を使って勉強しようと思います。</p>

<p>最近はEclipseのシェアは減少傾向でIntelliJ IDEAのシェアが増加傾向ということを聞いたので、</p>

<p>インストールしてみます。</p>

<p><a href="https://www.jetbrains.com/idea/download/">ダウンロードページ</a></p>

<p>Ultimate EditionとCommunity Editionの２つありますが、</p>

<p>今回はFreeのCommunity Editionを選択してダウンロード ※対象はOS X</p>

<p>ダウンロードが完了したら<strong>.dmg パッケージ</strong>を開いて<strong>IntelliJ IDEA</strong>をアプリケーションフォルダにドラッグ&amp;ドロップ</p>

<h2>IntelliJ IDEAを起動</h2>

<p>一先ず起動して、初回起動時に聞かれる質問にはデフォルトのままOK。</p>

<p>第一画面でCreate New Projectを選択すると次の画面に。</p>

<p>JDKはすでにインストール済みだったので、画面でjavaプロジェクトを選択して右上のNewボタンを押下し、</p>

<p>＋JDKを押下して自分でjava_homeを設定。</p>

<p>ちなみにjava_homeはOS Xの場合は下記で確認</p>

<pre><code>/usr/libexec/java_home -V
</code></pre>

<p>設定が完了したら、nextを押して次の画面にいき、Create project from templateにチェックを入れて次へ</p>

<p>Project nameを入れるところがあるので適当に入力しFinishを押すと、main付きのClassが作成される。</p>

<p>一先ず作成出来たんで一旦終了。
ちょっとずつ勉強がてらjavaを作っていきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2月の目標]]></title>
    <link href="http://tsuetsugu.github.io/blog/2015/02/05/goal-for-february/"/>
    <updated>2015-02-05T22:23:20+09:00</updated>
    <id>http://tsuetsugu.github.io/blog/2015/02/05/goal-for-february</id>
    <content type="html"><![CDATA[<p>目標を書く前に・・・・</p>

<p>色々活動していたら、
自分のスキルを客観的に知れたので、
現状のスキルを棚卸し。</p>

<p><dl>
  <br>
  <dt>HTML/CSS</dt>
  <dd>基礎をちょっと学んだ程度でサイトはまだ書いていない</dd><br>
  <dt>PHP</dt>
  <dd>変数書いて簡単なロジックが書ける程度</dd><br>
  <dt>java</dt>
  <dd>コード書けといわれたら多分書けるけど、基礎が全く抜けてる</dd><br>
<dt>SQL</dt>
<dd>基本の文は書けるが複雑なSQLはNG</dd><br></p>

<p>うーん、全然ですね(笑)</p>

<p>実はコードは書けても、どう書くべきかを理解していないのがほとんど。</p>

<p>３月末までには、自分の方向性にあったスキルを磨く予定・・・。</p>

<p>ということで・・・</p>

<h2>２月の目標</h2>

<ul>
<li>ブログのCSSをいじってカスタマイズ</li>
<li>PHPでローカル環境にサイト作成</li>
<li>独自ドメインでブログを設定</li>
</ul>


<p>何でも完璧にするということはやめて、
習うより慣れろをベースに２月活動します。</p>
]]></content>
  </entry>
  
</feed>
